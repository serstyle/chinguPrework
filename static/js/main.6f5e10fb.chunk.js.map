{"version":3,"sources":["Search/Search.js","Preloader/Preloader.js","Scroll/Scroll.js","MeteoriteList/MeteoriteList.js","App.js","serviceWorker.js","index.js"],"names":["Search","state","input","_this2","this","react_default","a","createElement","style","textAlign","onSubmit","e","props","onSearchChange","TextField_default","label","onChange","setState","target","value","Component","withStyles","theme","progress","margin","spacing","unit","classes","CircularProgress_default","className","Scroll","console","log","overflow","height","children","CustomTableCell","head","backgroundColor","palette","common","black","color","white","body","fontSize","TableCell","MeteoriteList","Paper_default","root","src_Scroll_Scroll","Table_default","table","TableHead_default","TableRow_default","TableBody_default","isPending","Preloader","postion","left","meteoriteArr","map","row","key","id","name","nametype","mass","fall","year","reclat","reclong","React","width","marginTop","overflowX","minWidth","&:nth-of-type(odd)","background","default","App","filterMeteorite","preventDefault","newArr","_this","filter","meteorite","toLowerCase","includes","fetch","then","res","json","data","position","Search_Search","src_MeteoriteList_MeteoriteList","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6f5e10fb.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport TextField from '@material-ui/core/TextField';\nexport default class Search extends Component {\n  state={\n    input:''\n  }\n  render() {\n        return (\n      <div style={{textAlign:'center'}}>\n        <form  onSubmit={(e)=>this.props.onSearchChange(e, this.state.input)}>\n          <TextField label='Search' onChange={(e)=>this.setState({input:e.target.value})}/>\n        </form>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst styles = theme => ({\n  progress: {\n    margin: theme.spacing.unit * 2,\n  },\n});\n\nfunction CircularIndeterminate(props) {\n  const { classes } = props;\n  return (\n    <div>\n      <CircularProgress className={classes.progress} />\n      {/* <CircularProgress className={classes.progress} color=\"secondary\" /> */}\n    </div>\n  );\n}\n\nCircularIndeterminate.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(CircularIndeterminate);","import React from 'react';\n\nconst Scroll = (props) => {\n  console.log('Scroll');\n  return (\n    <div style={{ overflow: 'scroll', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Preloader from '../Preloader/Preloader'\nimport Scroll from '../Scroll/Scroll'\nconst CustomTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing.unit * 3,\n    overflowX: 'auto',\n  },\n  table: {\n    minWidth: 700,\n  },\n  row: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.background.default,\n    },\n  },\n});\n\n\nclass MeteoriteList extends React.Component {\n\n  render(){\n      const { classes } = this.props;\n      return (\n        <Paper className={classes.root}>\n        <Scroll>\n          <Table className={classes.table}>\n            <TableHead>\n              <TableRow>\n                <CustomTableCell>Name</CustomTableCell>\n                <CustomTableCell>ID</CustomTableCell>\n                <CustomTableCell>Name Type</CustomTableCell>\n                <CustomTableCell>Mass(g)</CustomTableCell>\n                <CustomTableCell>Fall</CustomTableCell>\n                <CustomTableCell>Year</CustomTableCell>\n                <CustomTableCell>Latitude</CustomTableCell>\n                <CustomTableCell>Longitude</CustomTableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n\n            {\n                this.props.isPending?\n                <Preloader style={{postion:'absolute', left:'45%'}}/>\n                :\n                !this.props.meteoriteArr?\n                <TableRow>error oopsie</TableRow>:\n                this.props.meteoriteArr.map(row => (\n                <TableRow className={classes.row} key={row.id}>\n                <CustomTableCell>{row.name}</CustomTableCell>\n                <CustomTableCell>{row.id}</CustomTableCell>\n                <CustomTableCell>{row.nametype}</CustomTableCell>\n                <CustomTableCell>{row.mass}</CustomTableCell>\n                <CustomTableCell>{row.fall}</CustomTableCell>\n                <CustomTableCell>{row.year}</CustomTableCell>\n                <CustomTableCell>{row.reclat}</CustomTableCell>\n                <CustomTableCell>{row.reclong}</CustomTableCell>\n                </TableRow>\n            ))}\n            </TableBody>\n          </Table>\n        </Scroll>\n        </Paper>\n      );\n  }\n}\n\nMeteoriteList.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(MeteoriteList);","import React, { Component } from 'react'\nimport Search from './Search/Search'\nimport MeteoriteList from './MeteoriteList/MeteoriteList'\n\n\nexport default class App extends Component {\n  state = {\n    input:'',\n    meteoriteArr:[],\n    filterMeteorite:[],\n    isPending:true\n  }\n\n  onSearchChange = (e, input) => {\n    e.preventDefault()\n    const newArr = this.state.meteoriteArr.filter(meteorite => meteorite.name.toLowerCase().includes(input.toLowerCase())?meteorite:null )\n    this.setState({filterMeteorite:newArr, input: input})\n  }\n\n  componentDidMount(){\n      fetch('https://data.nasa.gov/resource/gh4g-9sfh.json')\n      .then(res => res.json())\n      .then(data => this.setState({meteoriteArr:data,isPending:false}))\n  }\n\n  render() {\n    return (\n      <div style={{width:'80%', position:'absolute', left:'10%', background:'#f8f8f8'}}>\n        <h1 style={{textAlign:'center'}}>Meteorite App</h1>\n        <Search onSearchChange={this.onSearchChange}/>\n        <MeteoriteList  meteoriteArr={this.state.input?this.state.filterMeteorite:this.state.meteoriteArr} isPending={this.state.isPending}/>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}